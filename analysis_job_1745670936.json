[
  {
    "file": "examples/job.py",
    "rule": "PotentialPickleDeserialization Vulnerability",
    "source": {
      "name": "UnknownSource",
      "line": 0,
      "col": 0,
      "context": "auto_detected",
      "description": "Automatically detected unknown source"
    },
    "sink": {
      "name": "PickleDeserialization",
      "line": 250,
      "col": 22,
      "vulnerability_type": "PickleDeserialization Vulnerability"
    },
    "tainted_variable": "Unknown",
    "severity": "Medium",
    "confidence": "Low",
    "description": "Potential dangerous operation point PickleDeserialization found, but data source could not be determined",
    "auto_detected": true,
    "propagation_path": [],
    "call_chain": [
      {
        "function": "message = reply_socket.recv_multipart()",
        "file": "examples/job.py",
        "line": 247,
        "statement": "message = reply_socket.recv_multipart()",
        "context_lines": [
          246,
          248
        ],
        "type": "source",
        "description": "Source of tainted data (NetworkInput) assigned to variable message"
      },
      {
        "function": "wait_for_files",
        "file": "examples/job.py",
        "line": 231,
        "statement": "def wait_for_files(self, reply_socket, job_address):",
        "context_lines": [
          231,
          282
        ],
        "type": "sink_container",
        "description": "Function containing sink PickleDeserialization, at line 250"
      },
      {
        "function": "pickle.loads(message[1])",
        "file": "examples/job.py",
        "line": 250,
        "statement": "pyfiles = pickle.loads(message[1])",
        "context_lines": [
          248,
          252
        ],
        "type": "sink",
        "description": "Unsafe PickleDeserialization operation, potentially leading to PickleDeserialization Vulnerability"
      }
    ]
  },
  {
    "file": "examples/job.py",
    "rule": "PotentialPickleDeserialization Vulnerability",
    "source": {
      "name": "UnknownSource",
      "line": 0,
      "col": 0,
      "context": "auto_detected",
      "description": "Automatically detected unknown source"
    },
    "sink": {
      "name": "PickleDeserialization",
      "line": 309,
      "col": 31,
      "vulnerability_type": "PickleDeserialization Vulnerability"
    },
    "tainted_variable": "Unknown",
    "severity": "Medium",
    "confidence": "Low",
    "description": "Potential dangerous operation point PickleDeserialization found, but data source could not be determined",
    "auto_detected": true,
    "propagation_path": [],
    "call_chain": [
      {
        "function": "message = reply_socket.recv_multipart()",
        "file": "examples/job.py",
        "line": 298,
        "statement": "message = reply_socket.recv_multipart()",
        "context_lines": [
          297,
          299
        ],
        "type": "source",
        "description": "Source of tainted data (NetworkInput) assigned to variable message"
      },
      {
        "function": "wait_for_connection",
        "file": "examples/job.py",
        "line": 284,
        "statement": "def wait_for_connection(self, reply_socket):",
        "context_lines": [
          284,
          327
        ],
        "type": "sink_container",
        "description": "Function containing sink PickleDeserialization, at line 309"
      },
      {
        "function": "cloudpickle.loads(message[2])",
        "file": "examples/job.py",
        "line": 309,
        "statement": "args, kwargs = cloudpickle.loads(message[2])",
        "context_lines": [
          307,
          311
        ],
        "type": "sink",
        "description": "Unsafe PickleDeserialization operation, potentially leading to PickleDeserialization Vulnerability"
      }
    ]
  }
]